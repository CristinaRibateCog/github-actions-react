name: CI
on:
  pull_request:
    branches: [develop, master]
  push:
    branches: [develop, master]

jobs:
  build:
    if: contains(github.event.head_commit.message , 'chore(release):') == false
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      - run: echo ::set-output name=actor::$GITHUB_ACTOR
        id: env_variables
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SEMANTIC_TOKEN }}
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Use NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "18.12.0"
      - run: npm ci # ~npm install
      - run: npm run format:check
      - run: npm test -- --coverage
        env:
          CI: true
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          path: coverage
          name: code-coverage
      - name: Build Projects
        if: github.event_name=='push'
        run: npm run build
      # - name: Upload Build Folder
      #   uses: actions/upload-artifact@v3
      #   if: github.event_name=='push'
      #   with:
      #     path: build
      #     name: build
      - name: ZIP Assets
        if: github.event_name=='push' && github.ref == 'refs/heads/master'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
      - name: Create a Release
        id: release
        if: github.event_name=='push' && github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN }}
      - name: pwd
        if: always()
        run: |
          pwd
          ls -a
          echo ${{ toJSON(steps.release.outputs)}}
      #      - uses: actions/download-artifact@v3
      #      - run: npm install -g surge
      #      - name: Deploy to Staging
      #        if: github.event_name=="push"
      #        run: npx surge --project ./build --domain silent-apparatus.surge.sh
      #        env:
      #          SURGE_LOGIN: ${{secrets.SURGE_LOGIN }}
      #          SURGE_TOKEN: ${{secrets.SURGE_TOKEN }}
      - name: Create issue
        if: failure()
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue: ci-push-main fails",
            "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.\n\n The commit hash was: _${{ github.sha }}_.",
            "labels":["bug"],
            "assignees": ["${{ steps.env_variables.outputs.actor }}"]
            }' \
          --fail
